<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <title>Input > Position</title>
    <style>
    body {
    	/*Clear our body's default margin*/
        margin: 0;
    }
    
    #stage {
    	/*Make a square stage and center it in on our screen, positioned absolutely*/
        height: 100vh;
        width: 100vh;
        margin-left: auto;
        margin-right: auto;
        background-color: lightblue;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translateX(-50%) translateY(-50%);
    }
    #ball, #paddle {
    	/*Animate our ball and paddle motion over 50ms*/
        transition: 50ms;
        position: absolute;
    }
    
    #ball {
    	/*Make a ball*/
        width: 20px;
        height: 20px;
        background-color: grey;
        border-radius: 50%;
    }
    
    #paddle {
    	/*And a paddle*/
		left: 50px;
        width: 10px;
        height: 50px;
        background-color: black;
    }
    
    #paddle {
    	/*Center our paddle on the screen to start*/
        top: 50%;
        transform: translateY(-50%);
    }
    </style>
</head>

<body style='opacity: 1.0;'>
    <div id='stage'>
        <div id='ball'></div>
        <div id='paddle'></div>

    <script src='generateInput.js'>
    </script>
    </div>
    <script>
    // Grab our stage and its width and height
    var stage = document.querySelector('#stage');
    var stageWidth = stage.offsetWidth;
    var stageHeight = stage.offsetHeight;
    // Create a score variable to keep track of how many times the computer scores on us
    var score = 0;
    // Create a single ball dictionary with everything we need to move the ball around
    var ball = {
        div: document.querySelector('#ball'),
        width: 20,
        height: 20,
        radius: 20 / 2,
        position: {
            x: stageWidth / 2 - 20 / 2,
            y: stageHeight / 2 - 20 / 2
        },
        velocity: {
            x: -10 + Math.random()*10,
            y: -10 + Math.random()*10
        },
        distanceTo: function(x, y) {
        	// A function to measure distance between the ball and a point
            var deltaX = (ball.position.x - x);
            var deltaY = (ball.position.y - y);
            return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        },
        moveTo: function(x, y) {
        	// Move the ball to a point and update its position
            ball.position.x = x;
            ball.position.y = y;
            ball.div.style.left = x - ball.radius + 'px';
            ball.div.style.top = y - ball.radius + 'px';
        },
        updateScore: function() {
        	// Check if we've lost a point and decrease the opacity of the screen if so, resetting the ball to the middle of the screen with a random velocity
            var scored = ball.distanceTo(0, ball.position.y) <= ball.width / 2;
            if (scored) {
                ball.moveTo(stageWidth / 2, stageHeight / 2);
                ball.velocity = {
                    x: -10 + Math.random() * 10,
                    y: -10 + Math.random() * 10
                };
                score++;
                document.body.style.opacity = parseFloat(document.body.style.opacity) - 0.1;
            }
        },
        updatePosition: function() {
        	// Update the position of the ball
            ball.updateScore();
            // Check if we should bounce off the right edge of the screen
            var xBounce = ball.distanceTo(stageWidth, ball.position.y) <= ball.radius;
            // And if we should bounce off the top or bottom
            var yBounce = ball.distanceTo(ball.position.x, stageHeight) <= ball.radius || ball.distanceTo(ball.position.x, 0) <= ball.radius;
            if (xBounce || paddle.shouldBounce(ball)) {
            	// If we're hitting the right edge or the paddle, flip our x velocity
                ball.velocity.x *= -1;
            }
            if (yBounce) {
            	// If we're hitting the top or bottom, flip our y
                ball.velocity.y *= -1;
            }
            // Move to a new position defined by our previous position and our x and y velocity
            ball.moveTo(ball.position.x + ball.velocity.x, ball.position.y + ball.velocity.y);
        }
    };
    // A dictionary to hold everything we need about our paddle
    var paddle = {
        div: document.querySelector('#paddle'),
        width: 10,
        height: 50,
        position: {
            x: 50,
            y: stageHeight / 2
        },
        shouldBounce: function(ball) {
        	// Given a ball, check to see if it's running into our right edge
            var xBounce = (ball.distanceTo(paddle.position.x + paddle.width / 2, ball.position.y) <= ball.radius)
            var withinPaddleY = ((paddle.position.y - paddle.height / 2) <= ball.position.y && ball.position.y <= (paddle.position.y + paddle.height / 2));
            return xBounce && withinPaddleY;
        },
        moveTo: function(x, y) {
        	// Move to an x and y coordinate and update our position; we'll only be using the y, since the paddle's x will be locked
            paddle.div.style.left = x - paddle.width / 2 + 'px';
            paddle.div.style.top = y - paddle.height / 2 + 'px';
            paddle.position.x = x;
            paddle.position.y = y;
        },
        updatePosition: function() {
        	// Connect our paddle's position to our input
            paddle.moveTo(paddle.position.x, input);
        }
    }
    // Initialize our input
    var input = generateInput()
    // Generate an input; in our case randomlyâ€” Replace this with your input!
    // var generateInput = function() {
    //     input = Math.random() * stageHeight;
    //     paddle.moveTo(paddle.position.x, input);
    // };
    // Update and aniamte the ball and paddle, generating a new input each frame
    var update = function() {
        ball.updatePosition();
        paddle.updatePosition();
        generateInput();
    }
    // Start!  Update the frame every 50ms
    setInterval(update, 50);
    </script>
</body>

</html>